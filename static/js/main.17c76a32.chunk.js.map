{"version":3,"sources":["components/images/0.jpg","components/images/1.jpg","components/images/2.jpg","components/images/3.jpg","components/images/4.jpg","components/images/5.jpg","components/images/6.jpg","components/images/7.jpg","components/images/8.jpg","components/images/9.jpg","components/images/10.jpg","components/Words.js","components/Hangman.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","words","randomWord","Math","floor","random","length","Hangman","props","handleGuess","e","letter","target","value","setState","st","guessed","add","mistakes","answer","includes","resetButton","Set","state","this","split","map","has","class","key","onClick","disabled","gameOver","maxWrong","isWinner","guessedWord","join","gameStat","generateButtons","className","src","images","alt","Component","defaultProps","step0","step1","step2","step3","step4","step5","step6","step7","step8","step9","step10","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oGAAAA,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,gC,2MCAvCC,G,MAAQ,CACR,cACA,cACA,SACA,UACA,QACA,cACA,aACA,aACA,eACA,eAGJ,SAASC,IACL,OAAOD,EAAME,KAAKC,MAAMD,KAAKE,SAAWJ,EAAMK,S,0LCG5CC,E,kDAOF,WAAYC,GAAO,IAAD,8BACd,cAAMA,IAQVC,YAAc,SAAAC,GACV,IAAIC,EAASD,EAAEE,OAAOC,MACtB,EAAKC,UAAS,SAAAC,GAAE,MAAK,CACjBC,QAASD,EAAGC,QAAQC,IAAIN,GACxBO,SAAUH,EAAGG,UAAYH,EAAGI,OAAOC,SAAST,GAAU,EAAI,QAbhD,EAmClBU,YAAc,WACV,EAAKP,SAAS,CACVI,SAAU,EACVF,QAAS,IAAIM,IAAI,IACjBH,OAAQjB,OArCZ,EAAKqB,MAAQ,CACTL,SAAU,EACVF,QAAS,IAAIM,IAAI,IACjBH,OAAQjB,KALE,E,0DAiBJ,IAAD,OACT,OAAOsB,KAAKD,MAAMJ,OAAOM,MAAM,IAAIC,KAAI,SAAAf,GAAM,OAAK,EAAKY,MAAMP,QAAQW,IAAIhB,GAAUA,EAAS,W,wCAG7E,IAAD,OACd,MAAO,4BAA4Bc,MAAM,IAAIC,KAAI,SAAAf,GAAM,OACnD,4BACIiB,MAAM,6BACNC,IAAKlB,EACLE,MAAOF,EACPmB,QAAS,EAAKrB,YACdsB,SAAU,EAAKR,MAAMP,QAAQW,IAAIhB,IAEhCA,Q,+BAcT,IAAMqB,EAAWR,KAAKD,MAAML,UAAYM,KAAKhB,MAAMyB,SAC7CC,EAAWV,KAAKW,cAAcC,KAAK,MAAQZ,KAAKD,MAAMJ,OACxDkB,EAAWb,KAAKc,kBAUpB,OARIJ,IACAG,EAAW,WAGXL,IACAK,EAAW,YAIX,yBAAKE,UAAU,qBACX,yCACA,yBAAKA,UAAU,eAAf,kBAA6Cf,KAAKD,MAAML,SAAxD,OAAsEM,KAAKhB,MAAMyB,UACjF,yBAAKM,UAAU,eACX,yBAAKC,IAAKhB,KAAKhB,MAAMiC,OAAOjB,KAAKD,MAAML,UAAWwB,IAAI,MAE1D,yBAAKH,UAAU,eACX,+CACA,2BACMP,EAAgCR,KAAKD,MAAMJ,OAAhCK,KAAKW,eAEtB,2BAAIE,GACJ,4BAAQT,MAAM,eAAeE,QAASN,KAAKH,aAA3C,iB,GA5EEsB,aAAhBpC,EACKqC,aAAe,CAClBX,SAAU,GACVQ,OAAS,CAACI,IAAOC,IAAOC,IAAOC,IAAOC,IAAOC,IAAOC,IAAOC,IAAOC,IAAOC,IAAOC,MAgFzEhD,Q,MCxFAiD,MARf,WACE,OACE,yBAAKjB,UAAU,OACb,kBAAC,EAAD,QCKckB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.17c76a32.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/0.f06df755.jpg\";","module.exports = __webpack_public_path__ + \"static/media/1.ca6c10d5.jpg\";","module.exports = __webpack_public_path__ + \"static/media/2.1dc76568.jpg\";","module.exports = __webpack_public_path__ + \"static/media/3.837148ce.jpg\";","module.exports = __webpack_public_path__ + \"static/media/4.db9097e8.jpg\";","module.exports = __webpack_public_path__ + \"static/media/5.fbff4784.jpg\";","module.exports = __webpack_public_path__ + \"static/media/6.c4ea9528.jpg\";","module.exports = __webpack_public_path__ + \"static/media/7.62a781c8.jpg\";","module.exports = __webpack_public_path__ + \"static/media/8.0f8ca81e.jpg\";","module.exports = __webpack_public_path__ + \"static/media/9.1b557aa7.jpg\";","module.exports = __webpack_public_path__ + \"static/media/10.c80394c2.jpg\";","var words = [\n    \"combination\",\n    \"alterations\",\n    \"bakery\",\n    \"brother\",\n    \"tears\",\n    \"functioning\",\n    \"transmited\",\n    \"Eucalyptus\",\n    \"unfathomable\",\n    \"countrymen\"\n]\n\nfunction randomWord() {\n    return words[Math.floor(Math.random() * words.length)];\n}\n\nexport { randomWord }","import React, { Component } from 'react';\nimport './Hangman.css';\nimport { randomWord } from './Words.js';\n\nimport step0 from './images/0.jpg';\nimport step1 from './images/1.jpg';\nimport step2 from './images/2.jpg'; \nimport step3 from './images/3.jpg';\nimport step4 from './images/4.jpg';\nimport step5 from './images/5.jpg';\nimport step6 from './images/6.jpg';\nimport step7 from './images/7.jpg';\nimport step8 from './images/8.jpg';\nimport step9 from './images/9.jpg';\nimport step10 from './images/10.jpg';\n\n\nclass Hangman extends Component {\n    static defaultProps = {\n        maxWrong: 10,\n        images : [step0, step1, step2, step3, step4, step5, step6, step7, step8, step9, step10 ]\n    }\n\n\n    constructor(props){\n        super(props);\n        this.state = {\n            mistakes: 0,\n            guessed: new Set([]),\n            answer: randomWord()\n        }\n    }\n\n    handleGuess = e => {\n        let letter = e.target.value;\n        this.setState(st => ({\n            guessed: st.guessed.add(letter),\n            mistakes: st.mistakes + (st.answer.includes(letter) ? 0 : 1)\n        }));\n    }\n\n    guessedWord(){\n        return this.state.answer.split(\"\").map(letter => (this.state.guessed.has(letter) ? letter : \" _ \"));\n    }\n\n    generateButtons() {\n        return \"abcdefghijklnopqrstuvwxyz\".split(\"\").map(letter => (\n            <button \n                class='btn btn-lg btn-primary m-2'\n                key={letter}\n                value={letter}\n                onClick={this.handleGuess}\n                disabled={this.state.guessed.has(letter)}\n                >\n                {letter}\n            </button>\n        ));\n    }\n\n    resetButton = () => {\n        this.setState({\n            mistakes: 0,\n            guessed: new Set([]),\n            answer: randomWord()\n        });\n    }\n\n    render () {\n        const gameOver = this.state.mistakes >= this.props.maxWrong;\n        const isWinner = this.guessedWord().join(\"\") === this.state.answer;\n        let gameStat = this.generateButtons();\n        \n        if (isWinner) {\n            gameStat = \"You Won\"\n        }\n\n        if (gameOver) {\n            gameStat = \"You Lost\"\n        }\n\n        return(\n            <div className=\"Hangman container\">\n                <h1> Hangman </h1>\n                <div className=\"float-right\">Wrong Guesses: {this.state.mistakes} of {this.props.maxWrong}</div>\n                <div className=\"text-center\">\n                    <img src={this.props.images[this.state.mistakes]} alt=\"\"/>\n                </div>\n                <div className=\"text-center\"> \n                    <p> Guess the word </p>\n                    <p>\n                        {!gameOver ? this.guessedWord() : this.state.answer} \n                    </p>\n                    <p>{gameStat}</p>\n                    <button class='btn btn-info' onClick={this.resetButton}>Restart</button>\n                </div>            \n            </div>\n        );\n    }\n}\n\nexport default Hangman;","import React from 'react';\nimport Hangman from './components/Hangman'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Hangman />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}